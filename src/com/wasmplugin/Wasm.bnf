{
    parserClass="com.wasmplugin.parser.WasmParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Wasm"
    psiImplClassSuffix="Impl"
    psiPackage="com.wasmplugin.psi"
    psiImplPackage="com.wasmplugin.psi.impl"

    elementTypeHolderClass="com.wasmplugin.psi.WasmTypes"
    elementTypeClass="com.wasmplugin.psi.WasmElementType"
    tokenTypeClass="com.wasmplugin.psi.WasmTokenType"
//    tokens=[
//        tLP="("
//        tRP=")"
//        tMODULE="module"
//
//        tID="regexp:\$([0-9]|[a-z]|[A-Z]|[!]  |[_]|  [#]  |  [$]  |  [%]  |  [&]  |  [′]  |  [∗]  |  [+]  |  [−]  |  [.]  | [/] | [:]  |  [<]  |  [=]  |  [>]  |  [?]  |  [@]  |  [∖]  |  [’]  |  [_]  |  [`]  |  [|]  |[~])+"
//        tINT="regexp:[+\-]?([1-9][0-9]+|[0-9])"
//        tFUNC="func"
//        tPARAM="param"
//        tI32="i32"
//        tI64="i32"
//        tF32="f32"
//        tF64="f64"
//        tDOT="."
//        tREINTERPRET_I64="reinterpret/i64"
//        tCONST="const"
//        tGET_GLOBAL="get_global"
//        tRESULT="result"
//        tGLOBAL="global"
//        tTABLE="table"
//        tMUT="mut"
//        tANYFUNC="anyfunc"
//        space='regexp:\s+'
//        comment='regexp:;;[^\n]+\n'
//        tNAME="regexp:\"[^\"\n]*\""
//        tELEM="elem",
//        tIMPORT="import"
//        tTYPE="type"
//        tMEMORY="memory"
//        tEXPORT="export"
//        tSTART="start"
//        tDATA="data"
//        tOFFSET="offset"
//        tLOCAL="local"
//
//
//
//    ]
}

module ::= tLP tMODULE tID? module_field*  tRP | module_field*

private module_field ::=    type
                             | import
                             | table
                             | memory
                             | global
                             | export
                             | element
                             | data
                             | start
                             | func
private expression::=instruction*

func::= tLP tFUNC tID? type_use local* expression tRP

value_type::= tI32|tF64|tF32|tI64
//
type_use::= tLP tTYPE idx tRP abbr_type_use
        |   abbr_type_use

abbr_type_use ::=  param_list? result?
//
idx::= tINT | tID
//
table_type::= limits elem_type

num::= tFLOAT | tINT

limits::=  tINT tINT | tINT

elem_type::= tANYFUNC | tFUNCREF

memory_type::= limits

global_type::= value_type | tLP tMUT value_type tRP

type::= tLP tTYPE tID? func_type tRP
func_type::= tLP tFUNC param_list? result? tRP
param_list::=  tLP tPARAM value_type value_type+ tRP
              |param_explicit+
param_explicit::=tLP tPARAM tID? value_type tRP
result::=   tLP tRESULT  value_type value_type+ tRP
        | result_explicit+
result_explicit::= tLP tRESULT value_type tRP

local::=   tLP tLOCAL  tID? value_type tRP
        | local_abbr

local_abbr::= tLP tLOCAL value_type* tRP

import ::= tLP tIMPORT tNAME tNAME import_desc tRP

import_desc ::= tLP tFUNC tID? type_use tRP
            | tLP tTABLE tID? table_type tRP
            | tLP tMEMORY tID? memory_type tRP
            | tLP tGLOBAL tID? global_type tRP

table::=  tLP tTABLE tID? table_type tRP
        | tLP tTABLE tID? elem_type elem_short tRP
        | tLP tTABLE tID? import_short table_type tRP
        | tLP tTABLE tID? export_short table_type tRP
import_short::= tLP tIMPORT tNAME tNAME tRP
export_short::= tLP tEXPORT tNAME tRP
elem_short ::= tLP tELEM idx* tRP //TODO(dherre) add data
//
memory::= tLP tMEMORY tID? memory_type tRP
        | tLP tMEMORY tID? data_short tRP
        | tLP tMEMORY tID? import_short memory_type tRP
        | tLP tMEMORY tID? export_short memory_type tRP

data_short::= tLP tDATA tNAME tRP

global::= tLP tGLOBAL tID? global_type  tLP instruction tRP tRP
        | tLP tGLOBAL tID? import_short global_type tRP
        | tLP tGLOBAL tID? export_short global_type tRP

export::= tLP tEXPORT tNAME export_desc tRP
export_desc::= tLP (tFUNC|tMEMORY|tTABLE|tGLOBAL) idx tRP
//
start::= tLP tSTART idx tRP
//
element::=  tLP tELEM idx? offset_abbrv tFUNC* idx*  tRP

offset_abbrv::=tLP tOFFSET? instruction tRP
//
data::= tLP tDATA idx? offset_abbrv tNAME tRP

//instruction::= value_type DOT CONST ()

instruction::= block_instruction | plain_instruction | folded_instruction

mem_arg::= offset_arg? align_arg?

offset_arg::=  tOFFSET tEQ tINT
align_arg::= tALIGN tEQ tINT

private block_instruction::=    tBLOCK tID? result? instruction* tEND tID?
                    |   tLOOP tID? result? instruction* tEND tID?
                    |   tIF tID? result? instruction* else_clause? tEND tID?
private else_clause::= tELSE tID? instruction*
                    // Control Instructions
private folded_instruction ::=  tLP plain_instruction folded_instruction* tRP
                    |   tLP tBLOCK tID? result? instruction* tRP
                    |   tLP tLOOP tID? result? instruction* tRP
                    |   tLP tIF tID? result? folded_instruction* tLP tTHEN instruction* tRP else_clause_folded? tRP

private else_clause_folded::=  tLP tTHEN instruction* tRP

private plain_instruction::=    tUNREACHABLE
                    |   tNOP
                    |   tBR idx
                    |   tBR_IF idx
                    |   tBR_TABLE idx+
                    |   tRETURN
                    |   tCALL idx
                    |   tCALL_INDIRECT type_use // TODO(dherre3): Verify that not identifier is bound to the parameters.
                    // Parametric Instructions
                    |   tDROP
                    |   tSELECT
                    |   tGET_LOCAL idx
                    |   tSET_LOCAL idx
                    |   tGET_GLOBAL idx
                    |   tSET_GLOBAL idx
                    |   tTEE_LOCAL idx
                    |   TLOCAL tDOT TGET idx
                    |   TLOCAL tDOT TSET idx
                    |   TLOCAL tDOT TTEE idx
                    |   TGLOBAL tDOT TGET idx
                    |   TGLOBAL tDOT TSET idx
                    // Memory Instructions
                    |   tI32 tDOT tLOAD mem_arg
                    |   tI64 tDOT tLOAD mem_arg
                    |   tF32 tDOT tLOAD mem_arg
                    |   tF64 tDOT tLOAD mem_arg
                    |   tI32 tDOT tLOAD8_S mem_arg
                    |   tI32 tDOT tLOAD8_U mem_arg
                    |   tI32 tDOT tLOAD16_S mem_arg
                    |   tI32 tDOT tLOAD16_U mem_arg
                    |   tI64 tDOT tLOAD8_S mem_arg
                    |   tI64 tDOT tLOAD8_U mem_arg
                    |   tI64 tDOT tLOAD16_S mem_arg
                    |   tI64 tDOT tLOAD16_U mem_arg
                    |   tI64 tDOT tLOAD32_S mem_arg
                    |   tI64 tDOT tLOAD32_U mem_arg
                    |   tI32 tDOT tSTORE mem_arg
                    |   tI64 tDOT tSTORE mem_arg
                    |   tF32 tDOT tSTORE mem_arg
                    |   tF64 tDOT tSTORE mem_arg
                    |   tI32 tDOT tSTORE8 mem_arg
                    |   tI32 tDOT tSTORE16 mem_arg
                    |   tI64 tDOT tSTORE8 mem_arg
                    |   tI64 tDOT tSTORE16 mem_arg
                    |   tI64 tDOT tSTORE32 mem_arg
                    |   tMEMORY tDOT tSIZE
                    |   tMEMORY tDOT tGROW
                    //      Numeric instructions
                    // const
                    |   tI32 tDOT tCONST tINT
                    |   tI64 tDOT tCONST tINT
                    |   tF32 tDOT tCONST num
                    |   tF64 tDOT tCONST num
                    // i32 ops
                    |   tI32 tDOT tCLZ
                    |   tI32 tDOT tCTZ
                    |   tI32 tDOT tPOPCNT
                    |   tI32 tDOT tADD
                    |   tI32 tDOT tMUL
                    |   tI32 tDOT tSUB
                    |   tI32 tDOT tDIV_S
                    |   tI32 tDOT tDIV_U
                    |   tI32 tDOT tREM_S
                    |   tI32 tDOT tREM_U
                    |   tI32 tDOT tAND
                    |   tI32 tDOT tOR
                    |   tI32 tDOT tXOR
                    |   tI32 tDOT tSHL
                    |   tI32 tDOT tSHR_S
                    |   tI32 tDOT tSHR_U
                    |   tI32 tDOT tROTL
                    |   tI32 tDOT tROTR
                    // i64 ops
                    |   tI64 tDOT tCLZ
                    |   tI64 tDOT tCTZ
                    |   tI64 tDOT tPOPCNT
                    |   tI64 tDOT tADD
                    |   tI64 tDOT tMUL
                    |   tI64 tDOT tSUB
                    |   tI64 tDOT tDIV_S
                    |   tI64 tDOT tDIV_U
                    |   tI64 tDOT tREM_S
                    |   tI64 tDOT tREM_U
                    |   tI64 tDOT tAND
                    |   tI64 tDOT tOR
                    |   tI64 tDOT tXOR
                    |   tI64 tDOT tSHL
                    |   tI64 tDOT tSHR_S
                    |   tI64 tDOT tSHR_U
                    |   tI64 tDOT tROTL
                    |   tI64 tDOT tROTR
                    // f32 opts
                    |   tF32 tDOT tABS
                    |   tF32 tDOT tNEG
                    |   tF32 tDOT tCEIL
                    |   tF32 tDOT tFLOOR
                    |   tF32 tDOT tTRUNC
                    |   tF32 tDOT tNEAREST
                    |   tF32 tDOT tSQRT
                    |   tF32 tDOT tADD
                    |   tF32 tDOT tSUB
                    |   tF32 tDOT tMUL
                    |   tF32 tDOT tDIV
                    |   tF32 tDOT tMIN
                    |   tF32 tDOT tMAX
                    |   tF32 tDOT tCOPYSIGN
                    // f64.opts
                    |   tF64 tDOT tABS
                    |   tF64 tDOT tNEG
                    |   tF64 tDOT tCEIL
                    |   tF64 tDOT tFLOOR
                    |   tF64 tDOT tTRUNC
                    |   tF64 tDOT tNEAREST
                    |   tF64 tDOT tSQRT
                    |   tF64 tDOT tADD
                    |   tF64 tDOT tSUB
                    |   tF64 tDOT tMUL
                    |   tF64 tDOT tDIV
                    |   tF64 tDOT tMIN
                    |   tF64 tDOT tMAX
                    |   tF64 tDOT tCOPYSIGN
                    //
                    |   tI32 tDOT tEQZ
                    |   tI32 tDOT tEQ
                    |   tI32 tDOT tNE
                    |   tI32 tDOT tLT_S
                    |   tI32 tDOT tLT_U
                    |   tI32 tDOT tGT_S
                    |   tI32 tDOT tGT_U
                    |   tI32 tDOT tLE_S
                    |   tI32 tDOT tLE_U
                    |   tI32 tDOT tGE_S
                    |   tI32 tDOT tGE_U
                    //
                    |   tI64 tDOT tEQZ
                    |   tI64 tDOT tEQ
                    |   tI64 tDOT tNE
                    |   tI64 tDOT tLT_S
                    |   tI64 tDOT tLT_U
                    |   tI64 tDOT tGT_S
                    |   tI64 tDOT tGT_U
                    |   tI64 tDOT tLE_U
                    |   tI64 tDOT tLE_S
                    |   tI64 tDOT tGE_S
                    |   tI64 tDOT tGE_U
                    //
                    |   tF32 tDOT tEQ
                    |   tF32 tDOT tNE
                    |   tF32 tDOT tLT
                    |   tF32 tDOT tGT
                    |   tF32 tDOT tLE
                    |   tF32 tDOT tGE
                    //
                    |   tF64 tDOT tEQ
                    |   tF64 tDOT tNE
                    |   tF64 tDOT tLT
                    |   tF64 tDOT tGT
                    |   tF64 tDOT tLE
                    |   tF64 tDOT tGE
                    //
                    |   tI32 tDOT tWRAP_I64
                    |   tI32 tDOT tTRUNC_S_F32
                    |   tI32 tDOT tTRUNC_U_F32
                    |   tI32 tDOT tTRUNC_S_F64
                    |   tI32 tDOT tTRUNC_U_F64
                    |   tI64 tDOT tEXTEND_S_I32
                    |   tI64 tDOT tEXTEND_U_I32
                    |   tI64 tDOT tTRUNC_S_F32
                    |   tI64 tDOT tTRUNC_U_F32
                    |   tI64 tDOT tTRUNC_S_F64
                    |   tI64 tDOT tTRUNC_U_F64
                    |   tF32 tDOT tCONVERT_S_I32
                    |   tF32 tDOT tCONVERT_U_I32
                    |   tF32 tDOT tCONVERT_S_I64
                    |   tF32 tDOT tCONVERT_U_I64
                    |   tF32 tDOT tDEMOTE_F64
                    |   tF64 tDOT tCONVERT_S_I32
                    |   tF64 tDOT tCONVERT_U_I32
                    |   tF64 tDOT tCONVERT_S_I64
                    |   tF64 tDOT tCONVERT_U_I64
                    |   tF64 tDOT tPROMOTE_F32
                    |   tI32 tDOT tREINTERPRET_F32
                    |   tI64 tDOT tREINTERPRET_F64
                    |   tF32 tDOT tREINTERPRET_I32
                    |   tF64 tDOT tREINTERPRET_I64

com::= BLOCK_COMMENT | LINE_COMMENT
